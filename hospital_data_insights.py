# -*- coding: utf-8 -*-
"""IFN619_assignment01_11357738_Nishadi-Hapuarachchige-checkpoint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RvgKpqI0JHEgQCoAnslffFQiCjU40HNF

<div style="background:#FFFFEE; color:#440404; padding:8px; border-radius: 4px; text-align: center; font-weight: 500;">IFN619 - Data Analytics for Strategic Decision Makers (2023_sem1)</div>

# IFN619 :: Assignment 1 :: Foundational techniques (40%)

**IMPORTANT:** Refer to the instructions in Canvas module [About the Assessment - Assignment 1](https://canvas.qut.edu.au/courses/2159/pages/instructions-for-foundational-techniques-assignment-assign-1?module_item_id=1170255) *BEFORE* working on this assignment.

1. Complete and run the code cell below to display your name and student number
2. Complete all questions in Part A
3. Arrange with your tutor to have 1 on 1 check of Part A
4. Complete a full analysis for Part B
5. Submit your final notebook on Canvas [Assignment 1 submission page](https://canvas.qut.edu.au/courses/2159/assignments/127214)
"""

# Complete the following cell with your details and run to produce your personalised header for this assignment

from IPython.display import HTML

first_name = 'Nishadi'
last_name = 'Hapuarachchige'
student_number = '11357738'

personal_header = f"<h1>{first_name} {last_name} ({student_number})</h1>"
HTML(personal_header)

"""---
## Part A - computational processing and data analysis techniques

### [Q1] Read in data from CSV (pandas)

- Open the file `assignment1-partA-data.csv` in Jupyter to view the data (from [www.covid19data.com.au](https://www.covid19data.com.au)). The data are QLD Hospitalisations and ICU beds related to COVID from April 2022 to February 2023.
- Identify an appropriate index, and make a note of the columns.
- Using the approach you have been shown in class, load the data into a pandas dataframe.

**Answer**

The 'Date' column could be identified as the appropriate index for this data set, becuase all the data were collected against a particular date, and most of the outcome would be quireied based on date, so it is quicker to set the 'Date' coulmn as index.


The given column names are not appropriate and according to the original site columns should be as follows.

1st Column -> 'Date'
2nd column -> 'All hospitalisations inc. identical Covid'
3rd column -> 'ICU'
"""

#load the data into pandas dataframe
import pandas as pd

file_path = "data/"
file_name = "assignment1-partA-data.csv"
df = pd.read_csv(f"{file_path}{file_name}", header=None)


#Assign appropriate column names
df.columns =['Date', 'Hospitalisations', 'ICU']

#set 'Date' coulmn to be the index column
df = df.set_index('Date')
#df = pd.read_csv(f"{file_path}{file_name}",,index_col="Date")
df

"""### [Q2] Filter a dataframe

- Qld health are most concerned about COVID during the Winter period.
- Select last year's winter data including the month before (May) and month after (September) into a **new** dataframe

"""

# Your answer here

winter_covid_df = df.loc['2022-05-01':'2022-09-30']
winter_covid_df

"""### [Q3] Visualisation

- Visualise the new dataframe with a line plot of size 16 x 9
- Ensure X and Y axes are labelled appropriately
- Create a legend of *cases* with 2 labels: *hospital* and *ICU*
- Add an appropriate title for the chart
"""

import matplotlib as mpl
import matplotlib.pyplot as plt


ax = winter_covid_df.reset_index().plot(x='Date', y=['Hospitalisations', 'ICU'], rot=60, figsize=(16, 9))
ax = plt.xlabel("Date", size = 10)
ax = plt.ylabel("Amount", size = 10)
ax = plt.title("Covid during QLD winter period", size = 15)
ax = plt.legend(["hospitals", "ICU"],title='ICU & Hospitals', fontsize=9, title_fontsize=12)

plt.show()

"""### [Q4] Get data URL from API

- import the appropriate libraries
- Use this url to get a JSON response: [https://data.gov.au/data/api/3/action/package_show?id=87f276c3-5fba-4f31-9032-199793d6f4a7](https://data.gov.au/data/api/3/action/package_show?id=87f276c3-5fba-4f31-9032-199793d6f4a7)
- Using the `result` key, get the result from the JSON response
- Using the `get_url(result,n)` function below, get the necessary URLS (Don't modify the function):
    0. Electric Vehicle Trial Data
    1. Electric Vehicle Trial Data Dictionary
"""

def get_url(result, n):
    base = result['result']['resources'][n]
    print(base['name'])
    return base['url']

# Your answer here
import requests

json_url = "https://data.gov.au/data/api/3/action/package_show?id=87f276c3-5fba-4f31-9032-199793d6f4a7"
response = requests.get(json_url)
json_response = response.json()
#json_response
json_response['result']

# 0. Electric Vehicle Trial Data
EVData_url = get_url(json_response,0)
EVData_url

EVDictionary_url = get_url(json_response,1)
EVDictionary_url

"""### [Q5] Read in CSV data from API

- Using the URLs that you obtained in Q4, load the data into two pandas dataframes


"""

# Your answer here
EVData_df = pd.read_csv(EVData_url)
EVData_df

EVDictionary_df = pd.read_excel(EVDictionary_url)
EVDictionary_df

"""### [Q6] Create a new dataframe with required columns

- Use the data dictionary dataframe to find the Column heading for: *'Number of kms indicated on odometer of EV at the beginning of the trip'*
- Use the data dictionary dataframe to find the Column heading for: *'Number of kms indicated on odometer of EV at the end of the trip'*
- Create a new dataframe with the columns headings found (Note: you may need to clean the column headings!)
- Rename the columns to `start` and `end`
- Filter out rows with `NaN`s
- Create a new column `kms` with a calculation of kms travelled
"""

# Your answer here
#Use the data dictionary dataframe to find the Column heading for: 'Number of kms indicated on odometer of EV at the beginning of the trip'
EVBeginning_df = EVDictionary_df[(EVDictionary_df.Explanation == 'Number of kms indicated on odometer of EV at the beginning of the trip')]
beginningCell = EVBeginning_df['Cell Title']
print(beginningCell)

#Use the data dictionary dataframe to find the Column heading for: 'Number of kms indicated on odometer of EV at the end of the trip'
EVEnd_df = EVDictionary_df[(EVDictionary_df.Explanation == 'Number of kms indicated on odometer of EV at the end of the trip')]
endCell = EVEnd_df['Cell Title']
print(endCell)

#clean columns in EVData_df dataframe to remove white spaces exists
EVData_df.columns = [c.strip() for c in EVData_df.columns.values.tolist()]
EVData_df.columns

beginningCell = beginningCell.str.strip()
endCell = endCell.str.strip()
beginningCell

EVData_df.columns.values

#make the new data frame using this 2 columns

new_EVData_df = EVData_df[['TEL_STARTODO', 'TEL_ENDODO']].copy()
new_EVData_df

#rename columns

new_EVData_df = new_EVData_df.rename(columns={"TEL_STARTODO": "start", "TEL_ENDODO": "end"})
new_EVData_df

new_EVData_df.isna().sum()

#filter NaN s
new_EVData_df=new_EVData_df.dropna()
new_EVData_df

#add new column with calculated results
copy_df = new_EVData_df.copy()
copy_df["kms"] = copy_df.end - copy_df.start
copy_df

"""### [Q7] Descriptive stats on dataframe

- Find the desriptive statistics for the kms travelled
- Assign the `count`, `mean`, `min`, and `max` to variables. Round the mean to a reasonable precision.
- Use the variables to create a string in the following format:
    - During the trial, a total of nnnn EV trips were recorded with the shortest trip being nnnn km and the longest trip being nnnn km. The average trip length was nnnn km.
- Print the constructed string
"""

# Your answer here
stat_df = copy_df['kms'].describe()
stat_df

count = stat_df['count']
mean = stat_df['mean']
min = stat_df['min']
max = stat_df['max']

mean_rounded = round(mean,2)
print(f"During the trial, a total of {count} EV trips were recorded with the shortest trip being {min} km and the longest trip being {max} km. The average trip length was {mean_rounded} km.")

"""### [Q8] Visualisation

- Using the plotly library, create a histogram of the kms travelled
- Set the number of bins such that the maximum count in any one bin is no more than a third of the total trips
- Display the actual counts in the bars
- Enhance the visualisation of the variance by including a box plot
- Use suitable colours and add appropriate textual information
"""

import numpy as np

max_count = count/3
print(f"max count a bin can have is {max_count}")

"""The maximum count a bin can have is 7200.67 which is equal to count/3. So, when we specify the number of bins in histogram method, we can try different bin no of bins and check how many count is shown for each bin in the graph. When we set the nbins as 26 or more the count in a bin doesn't get affected more and there it reaches the maximum bin count limit. So this scenario 26 bins are required."""

# Your answer here
#Set the number of bins such that the maximum count in any one bin is no more than a third of the total trips???
import plotly.express as px

fig = px.histogram(copy_df['kms'],
                   nbins=26,
                   marginal = 'box',
                   text_auto=True,
                   title="kms Travelled"
                  )

fig.update_layout(
    title_font_size=25,
    title_x=0.5,
    legend_title_font_size=15,
    width=750
)

fig.show()

"""---
## Part B - creating a narrative to answer significant questions

**Scenario:**  When children are unwell it is a stressful period not only for the child, but their carers (e.g. parent/s), and other family members and friends as well. Child injury and illness, and the extent to which they can be alleviated is a significant concern for local communities. Serious injury or illness will usually result in a child presenting to an emergency department (ED) of a local hospital. The degree of stress for children and their support network can be impacted significantly by lengthy wait times in the ED. Thus there is a general community interest knowing how well local hospitals are performing in this area.

 **Data Source:** Queensland Health provides open data on [paediatric emergency departments via data.gov.au](https://data.gov.au/dataset/ds-qld-c9c345bd-f05a-47ca-84b6-aade1e062d8b/details?q=emergency) NOTE: Use *Summary 1* and *Summary 3* data from 2022 for this task.

**Task:** Your task as a data analyst is to:

- Identify high quality questions that when answered may be helpful in addressing the scenario above
- Select at least _3 months_ of ED paediatric data to analyse
- Select at least _2 hospitals_ with high quality data to analyse
- Clean the data as necessary
- Analyse the data in a way that answers your questions and ultimately addresses the concern in the scenario
- Visualise your results in a meaningful way that is helpful in making visible key findings
- Provide a detailed summary of the insights found and how they address the original questions and scenario

NOTE: You must document your thinking and approach throughout the notebook using the Markdown cells

### Part B - Answer

## QDAVI Cycle

QDAVI cycle consist of five phases including Question, Data, Analysis, Visualization and Insights. These steps will be followed sequentially, to make insights about the waiting times in the ED and how it affects the patients and the other parties.

## Step 01: Question
In this phase, the main goal is to understand the context and identify the concerns of stakeholders by exploring questions that might be required to address the context with a plan setup ahead.

According to the given scenario, when a child was taken to the Emergency Department(ED) at a hospital, there could be different waiting times in the ED due to different reasons. The waiting time could impact the patients and the patients network as well as the hospital's performance grading and therefore it is required to understand how this waiting times in The ED affects each aspects.

From a patient's perspective they might want to know which hospitals are the best for the emergency teatements with a less waiting time.     
From hospital management perspective, they might be interested in identifying the factors and causes for lengthy waiting times in the ED.

> **QUESTIONS**

1. Which hospitals are the best for emergency treatments with less waiting time?
2. How a hospital can improve its Emergency Department performance to facilitate patients' treatments as quickly as possible?
       
          - Which month of the year has a high patient volume?
          - Which type of triage categories should be prioritized?
          - What factors cause the lengthy waiting times and how does a patient's lengthy waiting time affect to  the hospital?
    

The plan is to select data from few hospitals containing the information about number of patients admitted to ED paediatric throughout a year and how long they had to wait to get a treatment.

## Step 02: Data
Data files were taken from Queensland Health [paediatric emergency departments via data.gov.au](https://data.gov.au/dataset/ds-qld-c9c345bd-f05a-47ca-84b6-aade1e062d8b/details?q=emergency) and for this analysis the ED Paediatric Summary 1 and Ed Paediatric Summary 3 records for months March, September and December 2022 has been used.
Initially these datframes doesn't have column names and their descriptions are provided in a seperate file. By exploring the data files with thier column descriptions, following were identified with some assumptions.
- The column referred as 'the month to which the data refers' will be considered as the month of which the data was collected.
- The code of the facility and the name of the facility are represented by the first and second columns respectively and these facility will be considered as the 'hospital'.
- The triage category of the patient, is refferred to each category assigned to a patient based on the triage assessment and this column will be considered as 'Triage category'
- The empty column, no longer used will be removed.
- 'number of emergency department attendances' represent the patient count that visited the ED and will be considered as Attendance_Count.
- 'median waiting time for treatment' is the time in minute that a patient had to wait for thier treatment
- 'number of attendances where the patient was seen within clinically recommended time', is where a patient has visited the hospital around a clinically recommended time to get the treatements.
- 'number of attendances where the patient did not wait for treatment', means patients count who did not wait for the treatments due to some factors
- The columns which referes to 'percent of attendances' will be considered as the the percentage value of each counts they are referring to.

In summary 01 type dataframes thier columns will be named as follows.
- the code of the facility (**Hospital_Code**)
- the name of the facility (**Hospital_Name**)
- the month to which the data refers (**Month**)
- the triage category of the patient (**Triage_Category**)
- number of emergency department attendances (**Attendance_Count**)
- median waiting time for treatment (in minutes) (**Waiting_Time**)
- a code denoting the colour of the traffic lighting for the Hospital Performance website – 1 is green, 2 is amber, 3 is red, null is white (**Hospital_Performance_Rank**)

In summary 03 type dataframes thier columns will be named as follows.

- number of attendances where the patient was seen within clinically recommended time (**Attendance_During_Clinic_Time**)
- percent of attendances where the patient was seen within clinically recommended time (**Attendance_During_Clinic_Time(%)**)
- number of attendances where the patient did not wait for treatment(**Attendance_Left_Without_Waiting**)
- percent of attendances where the patient did not wait for treatment(**Attendance_Left_Without_Waiting(%)**)
- number of attendances where the patient was admitted to an inpatient bed(**Admitted_Count**)
- percent of attendances where the patient was admitted to an inpatient bed (**Admitted_Count(%)**)
- number of attendances where the patient was admitted to an inpatient bed within four hours(**Admitted_Withing4hrs_Count**)
- percent of attendances where the patient was admitted to an inpatient bed within four hours(**Admitted_Withing4hrs_Count(%)**)
- The column that is no longer used will be renamed as **Unused**

Once the column names were properly assigned then, checked the data which should be taken to the further analysis. The summary 01 and summary 03 datasheets corresponds to each month, contains same number of rows and therefore to make it easier to use summary 01 and summary 03 data files were combined and created a new dataframe for each quarter and named them as:
- mar_summary_df (combination of summary 01 and summary 03 files from March)
- sep_summary_df (combination of summary 01 and summary 03 files from September)
- dec_summary_df (combination of summary 01 and summary 03 files from December)

Then, these three dataframes were combined together to create a one dataframe (ped_summary_df) and it contins all the details for the months March, September and December for all hospitals given.

In this step data will loaded first, then cleaned.

### Data loading
For the year 2022, March, September and December month data files will be selected for this analysis and for each month summary 01 and summary 03 datafiles are loaded in to new dataframes. Some of the datframes are having csv file format and some are having excel format. So, to load dataframes read_csv() and read_excel() methods will be used with header=None becuase there are no current headers assigned to the datafiles.
"""

#import pandas library
import pandas as pd
import numpy as np
import re

#A method to read an excel file into a pandas dataframe
def load_excelFiles(file_name):
    file_path = 'data/'
    mar_summary_01_df = pd.read_excel(f"{file_path}{file_name}", header=None) #header=None used since no headings intitially
    return mar_summary_01_df

#A method to read a csv file into a pandas dataframe
def load_csvFiles(file_name):
    file_path = 'data/'
    sep_summary_01_df = pd.read_csv(f"{file_path}{file_name}", header=None)
    return sep_summary_01_df

mar_summary_01_df = load_excelFiles('mar_22_ped_summary1.xls')
mar_summary_01_df

mar_summary_03_df = load_excelFiles('mar_22_ped_summary3.xls')
mar_summary_03_df

sep_summary_01_df = load_csvFiles('sep_22_ped_summary1.csv')
sep_summary_01_df

sep_summary_03_df = load_csvFiles('sep_22_ped_summary3.csv')
sep_summary_03_df

dec_summary_01_df = load_excelFiles('dec_22_ped_summary1.xlsx')
dec_summary_01_df

dec_summary_03_df = load_csvFiles('dec_22_ped_summary3.csv')
dec_summary_03_df

"""### Add column titles
Since there are no column titles, as explained above, dataframe column titles will be added as this.
"""

mar_summary_01_df.columns =['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank', 'Unused']

mar_summary_03_df.columns = ['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',  'Unused',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)' ]

sep_summary_01_df.columns =['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank', 'Unused']

sep_summary_03_df.columns = ['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',  'Unused',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']

dec_summary_01_df.columns =['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank', 'Unused']

dec_summary_03_df.columns = ['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',  'Unused',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)' ]

"""### Create one summary dataframe for each month

Both sumamry 01 and summary 3 dataframes for each month have same rows count. And to check if they have an equal dataset, the equals() method was used with specifying hospital code and hospital name.

Once we identified they have same dataset, we can combine these two dataframes and create a new dataframe containg all the required columns from summary 01 and sumamry 3.
"""

#Check whether the sumamry 1 and summary 3 dataframes have same hospitals dataset
# select columns to compare
cols_to_compare = ['Hospital_Code', 'Hospital_Name','Month', 'Triage_Category']

# compare dataframes based on selected columns
df_equal_mar = mar_summary_01_df[cols_to_compare].equals(mar_summary_03_df[cols_to_compare])
df_equal_sep = sep_summary_01_df[cols_to_compare].equals(sep_summary_03_df[cols_to_compare])
df_equal_dec = dec_summary_01_df[cols_to_compare].equals(dec_summary_03_df[cols_to_compare])

print(f"March dataframes are equal {df_equal_mar}, Sep dataframes are equal {df_equal_sep} and Dec dataframes are equal {df_equal_dec}")

#dropped the column 'Unused' from all dataframes. This step is not required since we concat only the required columns.
mar_summary_01_df = mar_summary_01_df.drop('Unused', axis=1)
mar_summary_03_df = mar_summary_03_df.drop('Unused', axis=1)

sep_summary_01_df = sep_summary_01_df.drop('Unused', axis=1)
sep_summary_03_df = sep_summary_03_df.drop('Unused', axis=1)

dec_summary_01_df = dec_summary_01_df.drop('Unused', axis=1)
dec_summary_03_df = dec_summary_03_df.drop('Unused', axis=1)

#Create a new dataframe for march_summary using concat()
mar_summary_df = pd.concat([mar_summary_01_df[['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank']],
                 mar_summary_03_df[['Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']]],
                axis=1)
mar_summary_df

#Create a new dataframe for september summary
sep_summary_df = pd.concat([sep_summary_01_df[['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank']],
                 sep_summary_03_df[['Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']]],
                axis=1)
sep_summary_df

#Create a new dataframe for december summary
dec_summary_df = pd.concat([dec_summary_01_df[['Hospital_Code', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank']],
                 dec_summary_03_df[['Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']]],
                axis=1)
dec_summary_df

"""### Create one dataframe for all the months
Since it is easier to analyse when the data is within a one dataframe, and these three separate dataframes are having same columns, we can combine them to create a new dataframe including all the records. For that concat() method can be used. Once created we get a dataframe with 630*3 rows with 15 columns.
"""

#This is used to see all the rows without compressing them
pd.set_option('display.max_rows', None)

#Now, ped_summary_df contains all the Pediatric Emergency Department data for the months of Mar, Sep and Dec
ped_summary_df = pd.concat([mar_summary_df, sep_summary_df, dec_summary_df])
# resetting index to have a new sequential order instead of value taking from the original df
ped_summary_df = ped_summary_df.reset_index(drop=True)
ped_summary_df

"""### Data Clean
Now we have a one dataframe containing patient counts, thier ED waiting times and etc. for different hospitals for three months of the year 2022. This dataframe need to be cleaned to use it before the analysis.

**(1) Remove 'ALL' Values**

The triage category 'ALL' does not mean a seperate value and it is just a representation for the total of each triage category. Keeping this in the dataframe would make it a seperate category whcih does not seems quite useful for the analysis with rest of the given data. Therefore, all the rows having Triage_Category = 'ALL' will be removed from the dataframe.
"""

# Select all the rows where Triage_Category is not 'ALL' and assign them back to ped_summary_df,
#so that now it doesn't have the records with category ALL
ped_summary_df = ped_summary_df[ped_summary_df['Triage_Category'] != 'ALL']
ped_summary_df = ped_summary_df.reset_index(drop=True)
ped_summary_df

"""**(2) Drop Columns**

Hospital_Code column is a redundant of Hospital_Name since both are referring to same context of hospital. Therefore, removing Hospital_Code column.

Percentage columns and thier related count columns are also representing the same thing. When considering percentage values, since they have one scale which is mapped to 100%, pecentages are a good way to compare with other columns.
So, we can drop normal count columns as they are redundant to keep in the dataframe.
"""

ped_summary_df = ped_summary_df.drop(['Hospital_Code','Attendance_During_Clinic_Time', 'Attendance_Left_Without_Waiting',
                                     'Admitted_Count', 'Admitted_Withing4hrs_Count']
                                     , axis=1)
ped_summary_df

"""**(3) Fill Missing Values**

- Waiting_Time

When checking for missing values using isna() method, we found that there are 182 NaNs included in the Waiting_Time column. While exploring the data it could identify these NaNs are there due to zero Attendance_Count since when no attendance then there's no waiting time exists. According to the info() method, waiting_time is float data type. We can't replace it with zero since zero has a meaning to not having a waiting time, so, we will drop these missing values. Dropping these Nans will remove the '-' characters in other columns as well.

- Hospital_Performance_Rank

There are missing values for Hospital_Performance_Rank column too. According to the column description, null values represent the 'white' code and therefore we will replace '-' and null values to '0' which will denote the performance code of white (neutral).
"""

#checking dataframe data types for each columns
ped_summary_df.info()

#checking for missing value counts for each columns
ped_summary_df.isna().sum()

#drop missing values of Waiting_Time column becuase these NaNs mean that there are no patients for these categories
ped_summary_df = ped_summary_df.dropna(subset=['Waiting_Time'])
ped_summary_df

copy_df = ped_summary_df.copy()
copy_df['Hospital_Performance_Rank'] = copy_df['Hospital_Performance_Rank'].str.replace('-','0')
ped_summary_df = copy_df.copy()
ped_summary_df

"""**(4) Converting data types of columns**

The percentage containing columns 'Attendance_During_Clinic_Time(%)','Attendance_Left_Without_Waiting(%)', 'Admitted_Count(%)' are having string data type and in order to use these columns for the numerical calculations, it is required to convert the data types as float. So following code will use to convert the datatypes using .astype() method.
"""

floatList = ['Attendance_During_Clinic_Time(%)','Attendance_Left_Without_Waiting(%)',
             'Admitted_Count(%)']
copy_df = ped_summary_df.copy()
for clmn in floatList:
    copy_df[clmn] = copy_df[clmn].astype('float')

copy_df.info()

ped_summary_df = copy_df.copy()
ped_summary_df.info()

"""## Step 03: Analysis

To answer the questions what factors impact the long waiting time and the concequences of long waiting time, now we can analyse the pre processed dataframe using different techniques.

First we need to get a general idea on how many patients visit the hospital EDs, which hospitals have highest patients visiting, which month of the year is more likely to have many patients and which triage category is most likely to happen. For this we need to explore the full dataset first.

**What month of the year and which hospital has more patients visiting hospitals' Emergency Department?**

Using groupby() with 'Hospital_Name','Month' columns and then sum the ED_Attendance_Count for each group we can take the total patient count who visited hospitals in each selected month. By this, we can see which hospitals EDs are more popular among patients and so that which hospitals required more attention to ED facilities with performance enhancements.

By retrieving the top 20 rows for higehst and lowest, we can assume that some hospitals have a large number of ED patients compared to other hospitals regardless of the triage category. So these hospitals should consider more on how to imrpove their performances.
"""

#Using groupby() with 'Hospital_Name','Month' columns and sum the ED_Attendance_Count
#as total patient count who visited hospitals in each quarter
hospital_patient_count = ped_summary_df.groupby(['Hospital_Name','Month'])['Attendance_Count'].sum().reset_index(name='total patient count')
#print(hospital_patient_count)

#get the top 20 rows with the lowest and the highest number of ED patients for any triage_category
highest_patient_count = hospital_patient_count.nlargest(20, 'total patient count')
print('\nHospitals having highest ED patient count: ')
print(highest_patient_count)

lowest_patient_count = hospital_patient_count.nsmallest(20, 'total patient count')
print('\nHospitals having lowest ED patient count: ')
print(lowest_patient_count)

"""**Which triage category has more patients coming for the treatements at hospitals' Emergency Department?**

Using groupby() with 'Hospital_Name','Triage_Category' columns and then sum the ED_Attendance_Count for each group we can take the total patient count who came for each triage category. By this, we can see which triage categories are most likely to occur, and so that which traiage categories required to give more priority to enhance the perfomances by reducing waiting time.

By retrieving the 20 higehst and lowest patient count for each category, we can see some triage categories required to pay high attention due to high patient counts.
"""

triage_cat_patient=ped_summary_df.groupby(['Hospital_Name','Triage_Category'])['Attendance_Count'].sum().reset_index(name='total patient count')
triage_cat_patient

#What triage_category has the highest and lowest number of ED patients
highest_triage_count = triage_cat_patient.nlargest(20, 'total patient count')
print('\nHospitals having highest ED patient count with relevant triage category: ')
print(highest_triage_count)

lowest_triage_count = triage_cat_patient.nsmallest(20, 'total patient count')
print('\nHospitals having lowest ED patient count with relevant triage category: ')
print(lowest_triage_count)

"""**Which month which triage category has more patients coming for the treatements at hospitals' Emergency Department?**

Using groupby() with 'Hospital_Name','Month','Triage_Category' columns and then sum the Attendance_Count for each group we can take the total patient count who came for each triage category in particular month. By this, we can see which triage categories are most likely to occur and in whcih month it is, and so that which traiage categories required to give more priority to enhance the perfomances by reducing waiting time.
"""

month_triage_count =ped_summary_df.groupby(['Hospital_Name','Month','Triage_Category'])['Attendance_Count'].sum().reset_index(name='total patient count')
#print(month_triage_count)

max_month_triage_count = month_triage_count.nlargest(20, 'total patient count')
print('\nHospitals having highest ED patient count with relevant triage category and specific month: ')
print(max_month_triage_count)

min_month_triage_count = month_triage_count.nsmallest(20, 'total patient count')
print('\nHospitals having lowest ED patient count with relevant triage category and specific month: ')
print(min_month_triage_count)

"""**Waiting time and Triage_Category relationships**

Now we have identified that triage category 3,4 and 5 have large patient count and we can check the waiting time for each of these triage categories.

After creating a sub dataframe containg only details of Hospital_Name, Triage_Category, Attendance_Count, Waiting_Time, Attendance_During_Clinic_Time(%) we can compare these columns according to thier values. When we retrieve subset of data which has the maxmimum waiting_time and minimum_waiting_time we can see that most of the hospitals high wait time was taken to triage_category 5 and 4.

But it is noticeable that highest time taken triage category has a less number of patient count which denotes that waiting time also could be vary among the hospital type even for the same triage category. Therefore, we need to do the analysis based on each hospital so that a hospital managment can pay attention to those specific aspects individually.    
"""

waittime_triage_df = ped_summary_df[['Hospital_Name','Month','Triage_Category','Attendance_Count', 'Waiting_Time']]

max_wait_time = waittime_triage_df.nlargest(20, 'Waiting_Time')
max_wait_time = max_wait_time.sort_values(by='Triage_Category', ascending=False)
print('\nHospitals having highest waiting time with relevant triage category: ')
print(max_wait_time)

min_wait_time = waittime_triage_df.nsmallest(20, 'Waiting_Time')
print('\nHospitals having lowest waiting time with relevant triage category: ')
print(min_wait_time)

"""**Waiting time, Attendance_During_Clinic_Time and Triage_Category relationships**

After comparing the waiting time with the triage category we identified that there could be high waiting time for some triage categories eventhough there's less patient count for those categories. So, now we can check if that time has affected by the time of patient visiting to the hospital, ie. whether the patient visit during the clinical time or not.

When comparing waiting time with Attendance_During_Clinic_Time percentage value, even the patient came within the specified clinical time (ie. when Attendance_During_Clinic_Time = 100%), still the wait_time has significant high values for some triage categories.
"""

#select the records where patients visit the ED during clinic time.
selected_rows = ped_summary_df[(ped_summary_df['Attendance_During_Clinic_Time(%)'] == 100.00) | (ped_summary_df['Attendance_During_Clinic_Time(%)'] == 100)]
#select subset of columns from the selected_rows df
selected_rows_df = selected_rows[['Hospital_Name','Triage_Category','Attendance_Count', 'Waiting_Time']]
selected_rows_df = selected_rows_df.sort_values(by='Triage_Category')
selected_rows_df

max_wait_time = selected_rows_df.nlargest(20, 'Waiting_Time')
max_wait_time = max_wait_time.sort_values(by='Triage_Category', ascending=False)
print('\nHospitals having highest waiting time with relevant triage category and Attendance_During_Clinic_Time: ')
print(max_wait_time)

"""### Select specific hospitals and analyse

While generally exploring the dataset, we could identified that there are some hospitals that has high patient count visitng the ED and some triage categories have high patient counts. So, to handle high volume of patients at ED it is required to analyse the factors like patients waiting time and how these affects the hospital performance. But, these factors varies between each hospital and therefore, we need to do the analysis based on each hospital so that a hospital managment can pay attention to those specific criterias.

To get a better clarity and for the easiness of exploration, in the next steps we selected only 4 hospitals based on thier high quality data available from the begining. These names were also appeared while the general analysis in above steps where these hospitals are in between highest and lowest ranges of analysis. So, Mount Morgan Hospital,Queen Elizabeth II Jubilee Hospital,Queensland Children's Hospital and The Prince Charles Hospital were selected and created a new dataframe.
"""

# create a new dataframe with the selected hospitals
selected_hospitals = ['Ipswich Hospital',"Queensland Children's Hospital",
                     'The Prince Charles Hospital','Logan Hospital']
selected_hospitals_df = ped_summary_df.loc[ped_summary_df['Hospital_Name'].isin(selected_hospitals)]
selected_hospitals_df = pd.DataFrame(selected_hospitals_df)
selected_hospitals_df

"""**Calculate average values**

Once the data types are converted, then calculate the average values for Hospital's each triage category waiting time related information. The average is calculated based on the three monthly values for each triage category. According to the below hospitalMonth_TriCategoryWaittime summary, we assume that the average value for each triage category for a hospital could represent the whole years(Mar, Sep, Dec) average counts and percentage values.
"""

hospitalMonth_TriCategoryWaittime = selected_hospitals_df.groupby(['Hospital_Name','Month','Triage_Category'])['Waiting_Time'].sum().reset_index(name='wait time')
hospitalMonth_TriCategoryWaittime

#Calculate mean for each column specified in mean_cols list.
mean_cols = ['Attendance_Count','Waiting_Time','Attendance_During_Clinic_Time(%)',
             'Attendance_Left_Without_Waiting(%)','Admitted_Count(%)','Admitted_Withing4hrs_Count(%)']

mean_df = selected_hospitals_df.groupby(['Hospital_Name','Triage_Category'])[mean_cols].mean().reset_index()
#order the dataframe by waiting_time, to view how other values are impacted to wait time.
mean_df = mean_df.sort_values(by='Waiting_Time', ascending=False)
mean_df

"""For this particular four hospitals also, we can see highest wait time is taken for triage category of 5 even it has a less patient count. But it can be seen that less waiting time has resulted in high percentage of admitted count.

When filtering Hospital_Performance_Rank = '3' values, we can retrieve the records which were marked as red flag for their performances. Then, we can compare it with the waiting time so that we can understand how the waiting time has impacted to the hospitals performance ranking.
"""

#filtering Hospital_Performance_Rank = '3' values from selected_hospitals_df dataframe
redflagged_rows = selected_hospitals_df[(selected_hospitals_df['Hospital_Performance_Rank'] == '3')]
redflagged_rows

"""## Step 04: Visualise

The data and their relations identifid could be illustraded better using visualtisation plots in this step. To get a better clarity and a good communication we select only few hospitals based on the analyis step outputs.

"""

import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
#selected hospitals name list for the general analysis
selected_hospitals = ['The Prince Charles Hospital', 'Queen Elizabeth II Jubilee Hospital','Beaudesert Hospital',
                      'Ipswich Hospital', 'Redland Hospital', 'Logan Hospital','Esk Hospital',
                      "Queensland Children's Hospital" ,'Mount Morgan Hospital']

"""**Which month has the highest patient counts**

We have created the dataframe hospital_patient_count at analysis phase which contains the hospitals and thier patient counts for each month. Since, hospital_patient_count df contains all the hospital records, for a better visualization following code will filter only the slected hospitals and plot the chart.

Since these records requires to create multi dimensional plots, the code uses pivot_table() which helps to group and aggregate data over multiple variables and so that can create multi dimensional plots.
"""

#creating multi dimensional plot to view hospital against thier patient count for each month
#total patient count is a value derived from the existing column values at analysis phase
df_selected = hospital_patient_count[hospital_patient_count['Hospital_Name'].isin(selected_hospitals)]
pivot_table = pd.pivot_table(df_selected, values='total patient count',
                             index='Hospital_Name', columns='Month')

# plot the pivot table as a bar chart, rot=90 will rotate the x-axis values
ax = pivot_table.plot(kind='bar', rot=90, grid=False, figsize=(10,7)) #grid=False used to remove grid lines form the plot
ax.set_xlabel('Hospital Name',fontsize=12)
ax.set_ylabel('ED Patient Count',fontsize=12)
ax.set_title('ED Patient count by Hospital and Month',fontsize=14)
ax.legend(fontsize=10, title = 'Month')
plt.show()

"""**Which Triage category has the highest patient counts**

We have created the dataframe triage_cat_patient at analysis phase which contains the hospitals and thier triage category related patient counts. Since, triage_cat_patient df contains all the hospital records, for a better visualization following code will filter only the slected hospitals and plot the chart.

Since these records requires to create multi dimensional plots, the code uses pivot_table() which helps to group and aggregate data over multiple variables and so that can create multi dimensional plots.
"""

#creating multi dimensional plot to view hospital against thier patient count for each triage category
#total patient count is a value derived from the existing column values at analysis phase

df_selected = triage_cat_patient[triage_cat_patient['Hospital_Name'].isin(selected_hospitals)]
pivot_table = pd.pivot_table(df_selected, values='total patient count',
                             index='Hospital_Name', columns='Triage_Category')

# plot the pivot table as a bar chart
ax = pivot_table.plot(kind='bar', rot=90, figsize= (10,7), grid=False)
ax.set_xlabel('Hospital Name', fontsize=12)
ax.set_ylabel('Total ED Patient Count', fontsize=12)
ax.set_title('Total ED Patient Count by Hospital and Triage Category', fontsize=14)
ax.legend(fontsize=10, title = 'Triage Category')
plt.show()

"""**Month and Hospital Vs Triage Category and total patient count**

We have created the dataframe month_triage_count at analysis phase which contains the hospitals and thier triage category related patient counts for each month. Since, month_triage_count df contains all the hospital records, for a better visualization following code will filter only the slected hospitals and plot the chart.

Since these records requires to create multi dimensional plots, the code uses pivot_table() which helps to group and aggregate data over multiple variables and so that can create multi dimensional plots.

This plot shows a stacked bar chart with each triage category containing total patient count for each hospital and month.
"""

# create a pivot table to aggregate the data

df_selected = month_triage_count[month_triage_count['Hospital_Name'].isin(selected_hospitals)]

pivot = pd.pivot_table(df_selected, values='total patient count', index=['Hospital_Name', 'Month'], columns=['Triage_Category'])

# create the stacked bar chart
pivot.plot(kind='bar', stacked=True, figsize=(15, 8), rot=85, grid=False)

# add chart labels and titles
plt.title('Total Patient Count by Triage Category and Hospital with Month', fontsize=14)
plt.xlabel('Hospital and Month', fontsize=12)
plt.ylabel('Total Patient Count', fontsize=12)
ax.legend(fontsize=10, title = 'Triage Category')
plt.show()

"""**Hospital Vs Waiting time for each Triage Category**

We have created the dataframe waittime_triage_df at analysis phase which contains the hospitals and thier waiting time  for each triage category. Since, waittime_triage_df df contains all the hospital records, for a better visualization following code will filter only the slected hospitals and plot the chart.

Since these records requires to create multi dimensional plots, the code uses pivot_table() which helps to group and aggregate data over multiple variables and so that can create multi dimensional plots.

"""

df_selected = waittime_triage_df[waittime_triage_df['Hospital_Name'].isin(selected_hospitals)]

pivot = pd.pivot_table(df_selected, values='Waiting_Time', index=['Hospital_Name'], columns=['Triage_Category'])

pivot.plot(kind='bar', figsize=(15, 8), rot=90, grid=False) #grid=False used to remove grid lines form the plot

# add chart labels and titles
plt.title('Waiting times for Hospitals',fontsize=14)
plt.xlabel('Hospital_Name',fontsize=12)
plt.ylabel('Waiting time(min)',fontsize=12)
ax.legend(fontsize=10, title = 'Triage Category')
plt.show()

"""**Waiting Time vs Patient left without waiting for treatment**

After the general analysis, we created a new dataframe mean_df which includes average values for percentage count columns and for spefic 4 hospitals we selected based on the data availability. Following scatter plot shows the relationship between waiting time and the patient's leaving percentage without taking treatments for the selected 4 hospitals.

According to belowe scatter plot we can see some pattern between waiting time and the patient's leaving percentage without taking treatments where when wait time increased, there's a increasing of left without treatment percentage.
"""

#scatter plot of waiting time and the patient's leaving percentage without taking treatments

sns.scatterplot(x='Waiting_Time', y='Attendance_Left_Without_Waiting(%)', hue='Hospital_Name', data=mean_df)

# Set the plot title and axis labels
plt.title('Waiting Time with patients left without waiting for treatements in Each Hospital',fontsize=14)
plt.xlabel('Waiting Time(minutes)',fontsize=12)
plt.ylabel('Attendance Left Without Waiting(%)',fontsize=12)
plt.grid(False)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=10, title='Hospital')

plt.show()

"""**Attendance During Clinic Time Vs Waiting Time**

Following scatter plot shows the relationship between the percenatge of Attendance During Clinic Time and waiting time of a patient for the selected 4 hospitals using mean_df dataframe.
"""

sns.scatterplot(x='Attendance_During_Clinic_Time(%)', y='Waiting_Time', hue='Triage_Category', data=mean_df)

# Set the plot title and axis labels
plt.title('Waiting Time with patients come for the treatements during clinical time in Each Triage category', fontsize=14)
plt.xlabel('Attendance During Clinic Time(%)', fontsize=12)
plt.ylabel('Waiting_Time', fontsize=12)
plt.grid(False)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, title='Triage Category', fontsize=10)

plt.show()

"""**Waiting Time and patients getting admitted for Triage categories**

This scatter plot shows the relationship between waiting time and the percentage of patients getting admitted to hospitals.
"""

sns.scatterplot(x='Waiting_Time', y='Admitted_Count(%)', hue='Triage_Category', data=mean_df)

# Set the plot title and axis labels
plt.title('Waiting Time with patients getting admitted for Triage categories', fontsize=14)
plt.xlabel('Waiting_Time', fontsize=12)
plt.ylabel('Admitted_Count(%)', fontsize=12)
plt.grid(False)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, title='Triage Category', fontsize=10)

plt.show()

"""## Step 05: Insights

1. Which hospitals are the best for emergency treatments with less waiting time?
2. How a hospital can improve its Emergency Department performance to facilitate patients' treatments as quickly as possible?
       
          - Which month of the year has a high patient volume?
          - Which type of triage categories should be prioritized?
          - What factors cause the lengthy waiting times and how does a patient's lengthy waiting time affect to the hospital?

**Insights**

We can summarize the insights derived from the analyse and visualization steps to answer these questions.

- The hospitals Queensland and Queensland Children's Hospital are more likely to visit by many patients and Queensland Children's Hospital has shown less than 30 minutes of waiting time for any of the Triage category types.
- Generally, in 2022, the September and December months have a high patient count reported in most of the hospitals compared to the month of March.
- Patients have mostly visited the Emergency Department for the triage categories 3,4 and 5 compared to 1 and 2.
- Triage categories 4 and 5 have the highest waiting time and triage category 1 has the lowest waiting time for most hospitals.
- Even if the patient visits the ED within the clinically requested time, it cannot guarantee that the patient could get treated without being waited.
- When there's a low waiting time, there's a high chance (more than 40%) of patients getting admitted to the hospital.
- When waiting time is more than 15 minutes, there is a high possibility(more than 2%) of patients leave the hospital without taking treatments.
- When the waiting has exceeded 30 minutes, the hospital performance rank code is most likely to be marked as 3, denoting the red lighting.


So, by these findings, we can say that the Queensland Children's Hospital is more suitable for any type of triage category treatment, and it has less waiting time.  

The hospital management can give their attention and make new ED strategies (assign more staff/specialists) on treating triage categories 4 and 5 in the months of September and December due to high patient volume visits and the lengthy waiting time these categories caused.

The triage category 1 having less wait time indicates that it is a most urgent type of emergency treatment, and we can see that a patient getting admitted for this type of category has more than 40% of probability. So, these types of triage categories should be prioritized by the ED.

But prioritizing some triage categories should not lead to the lengthy wait time for other categories since if the waiting time is more than 15 minutes, more than 2% of patients would leave the hospital without taking treatments which could mark the red lighting for hospital performance.

Lengthy waiting times could be affected by other factors like hospital policies and procedures, patient behaviour, and staffing actions and these could also impact the decision of leaving without waiting for the treatments. Therefore, it is required to consider all other factors before concluding the analysis of paediatric ED treatments.
"""