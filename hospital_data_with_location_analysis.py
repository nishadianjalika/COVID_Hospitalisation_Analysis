# -*- coding: utf-8 -*-
"""IFN619_assignment02_11357738_Nishadi-Hapuarachchige-checkpoint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7k4N-cIh0X1AQFhprb80gGynGBoBjKu

<div style="background:#FFFFEE; color:#440404; padding:8px; border-radius: 4px; text-align: center; font-weight: 500;">IFN619 - Data Analytics for Strategic Decision Makers (2023_sem1)</div>

# IFN619 :: Assignment 2 :: Extending Analytics (40%)

**IMPORTANT:** Refer to the instructions in Canvas module [About the Assessment - Assignment 2](https://canvas.qut.edu.au/courses/2159/pages/instructions-for-extending-analytics-assignment?module_item_id=1170253) *BEFORE* working on this assignment.

1. Complete and run the code cell below to display your name, student number, and assignment option
2. Delete the cells for the option that you are not using
3. Complete a full analysis for your chosen option. Ensure that you include:
    - documentation of your thinking and decision-making
    - clear articulation of ethical considerations and human factors in both your analysis choices and your insights
    - at least one extended analysis approach (unstructured data analytics, ehanced visualisation, machine learning techniques)
4. Submit your final notebook on Canvas [Assignment 2 submission page](https://canvas.qut.edu.au/courses/2159/assignments/127215)
"""

# Complete the following cell with your details and run to produce your personalised header for this assignment

from IPython.display import HTML

# personal details
first_name = 'Nishadi'
last_name = 'Hapuarachchige'
student_number = 11357738
# assignment option
option_choice = 'extending assignment 1' # either "extending assign 1" OR "own choice of analysis"

personal_header = f"<h1>{first_name} {last_name} ({student_number}) :: Option: {option_choice}</h1>"
HTML(personal_header)

"""---
### Option 1 - extending assignment 1

Extend your assignment 1 analysis by including consideration of ethical and human factors, including 1 extended analysis technique, and using at least 1 additional data source. Possible additional data sources:

1. Guardian API (See accessing the Guardian API notebook)
2. Hospital location data (Provided, see data folder)

**NOTE:** you should not repeat the analysis from assignment 1, but you may need to save dataframes from assignment 1 and reload for use in this assignment. You may also summarise your assignment 1 insights as part of the process of identifying questions for analysis.

## Scenario

Queensland has several state-wide health services covering all the areas of Queensland and each of these health services has several hospitals. All these hospitals consist of an emergency department(ED) and EDs are generally known to be a busy section of a hospital. In different hospitals, patients visiting the emergency department could experience varying waiting times where some patients are promptly attended to but others have to endure long wait times.

Serious injury or illness of a child usually results in a child presenting to an ED of a local hospital. According to the insights identified through the previous assignment 01 analysis, the Queensland Children's Hospital is mostly visited for all types of triage category treatment, and it has shown a less waiting time. The Triage category 1 has less wait time which indicates that it is a most urgent type of emergency treatment, and a patient getting admitted for this type of category has more than 40% of probability. So, these types of triage categories should be prioritized by the ED. But prioritizing some triage categories should not lead to a long wait time for other categories since if the waiting time is more than 15 minutes, more than 2% of patients would leave the hospital without taking treatments which could mark the red lighting for hospital performance. Therefore, the hospital management should give their attention and make new ED strategies (assign more staff/specialists) for treating triage categories 4 and 5 due to high patient volume visits and the lengthy waiting time these categories caused.

Although we have these summary insights in hand, usually not all the hospitals in Queensland state has high patient volume or high demand throughout the year. Even though some hospitals have a lengthy waiting time for some triage categories, some hospitals do not have such waiting times. So, the Queensland Government and Queensland Health are interested in identifying the general child patient distribution and yearly demand of EDs in Queensland so that the government can facilitate those areas to improve the efficiency of hospital EDs and make patients' hospital visits easier which are in high demanded areas. And sometimes, not all illnesses or injuries are required to be presented in ED and those can be treated at primary healthcare. Therefore, hospital administration and patients are interested in such primary-level healthcare treatment procedures. Hospital administration is also interested in identifying the characteristics of patients who did not wait for treatments such that these findings may inform the development of improved ED work practices, policy and planning.


Data Source: [paediatric emergency departments via data.gov.au](https://data.gov.au/dataset/ds-qld-c9c345bd-f05a-47ca-84b6-aade1e062d8b/details?q=emergency)

## QDAVI Cycle

QDAVI cycle consist of five phases including Question, Data, Analysis, Visualization and Insights. These steps will be followed sequentially, to make insights about the general patient distribution and yearly demand of EDs in Queensland.

## Step 01: Question
In this phase, the main goal is to understand the context and identify the concerns of stakeholders by exploring questions that might be required to address the context with a plan set up ahead.

According to the given scenario and findings from the assignment 01 analysis, the following areas were identified as the interested areas of several stakeholders.

The Queensland Government and Queensland Health are interested in identifying the general child patient distribution and yearly demand of EDs in Queensland so that the government can facilitate those areas to improve the efficiency of hospital EDs. Hospital administration is interested in identifying the characteristics of patients who did not wait for treatments such that these findings may help to improve ED work practices, policy and planning. General patients are interested in treatment procedures of triage categories that do not mandatorily require to be taken to the ED.    


> **QUESTIONS**

1. What is the general patient volume distribution in Queensland hospitals and what are the highly demanded regions?

        - Are there enough hospitals and do they have enough capacity to handle the demand of patients? Does the   government need to build more hospitals?
        - Is there any difference in patient volume, or waiting time between regional area hospitals and metro area hospitals in Queensland?
        - Are there any regions that are highly demanded specific triage categories, and how do those areas have   handled the waiting time?

2. What are the factors that cause the patients to leave the hospitals without taking treatments?

        - Do patients tend to leave the hospitals without treatments in all areas regardless of regional or metro?
        - Does the leaving of patients without treatments depends on the triage category type?
        - What are the reasons for them to leave?
        - Are there any illnesses or injuries which are not required to be presented in ED and can be treated at    primary healthcare so that the waiting time issue can be addressed to those triage categories?
   
        
  
> **Plan**

The plan is to reuse the same child patient data used in assignment 01 with additionally provided location data. For this analysis Enhanced visualisation techniques will be used to further explore the data by comparing the location-related data as well.

The analysis will consider the human and ethical factors by making human intuitions and assumptions and these assumptions will be acknowledged in this report.
This analysis will be more focused on the metropolitan areas and regional areas hospital distribution details and when considering the regionals, it has been assumed that Brisbane city area and all the South East Queensland come under the metropolitan areas and the rest of the service areas have been considered as regional areas.
In this analysis, it has been assumed that patients have visited or been taken to the emergency department based on their residential area or based on the place where the injury occurred.  
The analysis is based on 3 months of data and it has been assumed that these three months of data would be enough to cover the insights taken for the whole year 2022.

The final insights are built based on these human and ethical factors and assumptions and it is possible to change these factors and assumptions which could lead to coming up with new insights.

## Step 02: Data
Data files were taken from Queensland Health [paediatric emergency departments via data.gov.au](https://data.gov.au/dataset/ds-qld-c9c345bd-f05a-47ca-84b6-aade1e062d8b/details?q=emergency) and for this analysis the same datafiles used in the analyis 01 has been used with an additional location datafile provided. ( ED Paediatric Summary 1 and Ed Paediatric Summary 3 records for months March, September and December 2022 for child patients)

Initially these datframes didn't have column names and following column names were assigned by combining summary 1 and sumamry 3 data sets.
**Facility Idenitifier, Hospital_Name, Month, Triage_Category, Attendance_Count, Waiting_Time, Hospital_Performance_Rank, Attendance_During_Clinic_Time, Attendance_During_Clinic_Time(%), Attendance_Left_Without_Waiting, Attendance_Left_Without_Waiting(%), Admitted_Count, Admitted_Count(%), Admitted_Withing4hrs_Count, Admitted_Withing4hrs_Count(%)**

summary 01 and summary 03 data files were combined and created a new dataframe for each quarter and named them as:
- mar_summary_df (combination of summary 01 and summary 03 files from March)
- sep_summary_df (combination of summary 01 and summary 03 files from September)
- dec_summary_df (combination of summary 01 and summary 03 files from December)

Then, these three dataframes were combined together to create a one dataframe (ped_summary_df) and it contins all the details for the months March, September and December for all hospitals given.

The hospital location data was provided by the datafile 'hospital-locations.csv' and following columns were merged by comparing the 'Facility Idenitifier' to the ped_summary_df.  
**Hospital and Health Service, Longitude, Latitude, Address**

Once the data is loaded and merged, pre processing is done to fill the missing values.

### Data loading
For the year 2022, March, September and December month data files will be selected for this analysis and for each month summary 01 and summary 03 datafiles are loaded in to new dataframes. Some of the datframes are having csv file format and some are having excel format. So, to load dataframes read_csv() and read_excel() methods will be used with header=None becuase there are no current headers assigned to the datafiles.
"""

#import pandas library
import pandas as pd
import numpy as np
import re

#A method to read an excel file into a pandas dataframe
def load_excelFiles(file_name):
    file_path = 'data/'
    mar_summary_01_df = pd.read_excel(f"{file_path}{file_name}", header=None) #header=None used since no headings intitially
    return mar_summary_01_df

#A method to read a csv file into a pandas dataframe
def load_csvFiles(file_name):
    file_path = 'data/'
    sep_summary_01_df = pd.read_csv(f"{file_path}{file_name}", header=None)
    return sep_summary_01_df

#Loading initial hospital data files for months of March, September and December
mar_summary_01_df = load_excelFiles('mar_22_ped_summary1.xls')
mar_summary_03_df = load_excelFiles('mar_22_ped_summary3.xls')
sep_summary_01_df = load_csvFiles('sep_22_ped_summary1.csv')
sep_summary_03_df = load_csvFiles('sep_22_ped_summary3.csv')
dec_summary_01_df = load_excelFiles('dec_22_ped_summary1.xlsx')
dec_summary_03_df = load_csvFiles('dec_22_ped_summary3.csv')

"""### Add column titles
Since there are no column titles, as explained above, dataframe column titles will be added as this.
"""

mar_summary_01_df.columns =['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank', 'Unused']

mar_summary_03_df.columns = ['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',  'Unused',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)' ]

sep_summary_01_df.columns =['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank', 'Unused']

sep_summary_03_df.columns = ['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',  'Unused',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']

dec_summary_01_df.columns =['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank', 'Unused']

dec_summary_03_df.columns = ['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',  'Unused',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)' ]

"""### Create one summary dataframe for each month

Both sumamry 01 and summary 3 dataframes for each month have same rows count. And to check if they have an equal dataset, the equals() method was used with specifying hospital code and hospital name.

Once we identified they have same dataset, we can combine these two dataframes and create a new dataframe containg all the required columns from summary 01 and sumamry 3.
"""

#Check whether the sumamry 1 and summary 3 dataframes have same hospitals dataset
# select columns to compare
cols_to_compare = ['Facility Idenitifier', 'Hospital_Name','Month', 'Triage_Category']

# compare dataframes based on selected columns
df_equal_mar = mar_summary_01_df[cols_to_compare].equals(mar_summary_03_df[cols_to_compare])
df_equal_sep = sep_summary_01_df[cols_to_compare].equals(sep_summary_03_df[cols_to_compare])
df_equal_dec = dec_summary_01_df[cols_to_compare].equals(dec_summary_03_df[cols_to_compare])

print(f"March dataframes are equal {df_equal_mar}, Sep dataframes are equal {df_equal_sep} and Dec dataframes are equal {df_equal_dec}")

#Create a new dataframe for march_summary, september summary and december summary using concat()
mar_summary_df = pd.concat([mar_summary_01_df[['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank']],
                 mar_summary_03_df[['Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']]], axis=1)

sep_summary_df = pd.concat([sep_summary_01_df[['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank']],
                 sep_summary_03_df[['Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']]], axis=1)


dec_summary_df = pd.concat([dec_summary_01_df[['Facility Idenitifier', 'Hospital_Name', 'Month','Triage_Category', 'Attendance_Count',
                            'Waiting_Time', 'Hospital_Performance_Rank']],
                 dec_summary_03_df[['Attendance_During_Clinic_Time', 'Attendance_During_Clinic_Time(%)', 'Attendance_Left_Without_Waiting'
                            , 'Attendance_Left_Without_Waiting(%)', 'Admitted_Count', 'Admitted_Count(%)',
                             'Admitted_Withing4hrs_Count', 'Admitted_Withing4hrs_Count(%)']]], axis=1)

"""### Create one dataframe for all the months
Since it is easier to analyse when the data is within a one dataframe, and these three separate dataframes are having same columns, we can combine them to create a new dataframe including all the records. For that concat() method can be used. Once created we get a dataframe with 630*3 rows with 15 columns.
"""

#This is used to see all the rows without compressing them
#pd.set_option('display.max_rows', None)

#Now, ped_summary_df contains all the Pediatric Emergency Department data for the months of Mar, Sep and Dec
ped_summary_df = pd.concat([mar_summary_df, sep_summary_df, dec_summary_df])
# resetting index to have a new sequential order instead of value taking from the original df
ped_summary_df = ped_summary_df.reset_index(drop=True)
ped_summary_df

"""### Load hospital location data

Loading hospital location data from the hospital-locations.csv file in data folder.
"""

hospital_locations_df = pd.read_csv(f"data/hospital-locations.csv")
hospital_locations_df

"""### Data Clean
Now we have a one dataframe containing patient counts, thier ED waiting times and etc. for different hospitals for three months of the year 2022. This dataframe need to be cleaned to use it before the analysis.

**(1) Remove 'ALL' Values and remove hospital name 'Queensland'**

The triage category 'ALL' does not mean a seperate value and it is just a representation for the total of each triage category. Keeping this in the dataframe would make it a seperate category whcih does not seems quite useful for the analysis with rest of the given data. Therefore, all the rows having Triage_Category = 'ALL' will be removed from the dataframe.

The hospital name with 'Queensland' is not a hospital and it represent some total count, therefore removing that from the dataset.
"""

# Select all the rows where Triage_Category is not 'ALL' and assign them back to ped_summary_df,
#so that now it doesn't have the records with category ALL
ped_summary_df = ped_summary_df[ped_summary_df['Triage_Category'] != 'ALL']
ped_summary_df = ped_summary_df.reset_index(drop=True)

ped_summary_df = ped_summary_df[ped_summary_df['Hospital_Name'] != 'Queensland']
ped_summary_df = ped_summary_df.reset_index(drop=True)
ped_summary_df

"""**(2) Fill Missing Values**

- Waiting_Time

When checking for missing values using isna() method, we found that there are 182 NaNs included in the Waiting_Time column. While exploring the data it could identify these NaNs are there due to zero Attendance_Count since when no attendance then there's no waiting time exists. According to the info() method, waiting_time is float data type. We can't replace it with zero since zero has a meaning to not having a waiting time, so, we will drop these missing values. Dropping these Nans will remove the '-' characters in other columns as well.

- Hospital_Performance_Rank

There are missing values for Hospital_Performance_Rank column too. According to the column description, null values represent the 'white' code and therefore we will replace '-' and null values to '0' which will denote the performance code of white (neutral).

- Latitude & Longitude

There are some missing(zero) latitude and longitude values and these values will be corrected using google geocoder and manual geo coordinates.  
"""

#checking for missing value counts for each columns
ped_summary_df.isna().sum()

#drop missing values of Waiting_Time column becuase these NaNs mean that there are no patients for these categories
ped_summary_df = ped_summary_df.dropna(subset=['Waiting_Time'])
ped_summary_df

copy_df = ped_summary_df.copy()
copy_df['Hospital_Performance_Rank'] = copy_df['Hospital_Performance_Rank'].str.replace('-','0')
ped_summary_df = copy_df.copy()
ped_summary_df

from geopy.geocoders import Nominatim

# Create a geocoder instance
geolocator = Nominatim(user_agent='my_application')

# Function to validate and update coordinates using address
def validate_and_update_coordinates(row):
    address = row['Address']
    location = geolocator.geocode(address)
    if location is not None:
        row['Latitude'] = location.latitude
        row['Longitude'] = location.longitude
    return row

def update_df_coordinates(dataframe):
    for index, row in dataframe.iterrows():
        address = row['Address']
        lat = row['Latitude']
        lon = row['Longitude']
        if pd.isnull(lat) or pd.isnull(lon) or lat == 0 or lon == 0:

            # Apply the validation and update function to the current row
            updated_row = validate_and_update_coordinates(row)
            # Update the corresponding row in the DataFrame with the updated values
            dataframe.loc[index] = updated_row

#Take subset of dataset according to Hospital and Health Service, because applying to geocode gets timeout when apply
#it as a whole
Central_Queensland_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Central Queensland']
Metro_North_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Metro North']
Metro_South_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Metro South']
Central_West_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Central West']
Cairns_Hinterland_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Cairns and Hinterland']
Childrens_Health_Queensland_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Childrens Health Queensland']
Darling_Downs_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Darling Downs']
Mackay_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Mackay']
Gold_Coast_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Gold Coast']
Mater_Public_Hospitals_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Mater Public Hospitals']
Sunshine_Coast_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Sunshine Coast']
South_West_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'South West']
North_West_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'North West']
West_Moreton_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'West Moreton']
Wide_Bay_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Wide Bay']
Torres_and_Cape_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Torres and Cape']
Townsville_df = hospital_locations_df[hospital_locations_df['Hospital and Health Service'] == 'Townsville']

update_df_coordinates(Central_Queensland_df)
update_df_coordinates(Metro_North_df)
update_df_coordinates(Metro_South_df)
update_df_coordinates(Central_West_df)
update_df_coordinates(Childrens_Health_Queensland_df)
update_df_coordinates(Darling_Downs_df)
update_df_coordinates(Mackay_df)
update_df_coordinates(Gold_Coast_df)

update_df_coordinates(Mater_Public_Hospitals_df)
update_df_coordinates(Sunshine_Coast_df)
update_df_coordinates(South_West_df)
update_df_coordinates(North_West_df)
update_df_coordinates(West_Moreton_df)
update_df_coordinates(Wide_Bay_df)
update_df_coordinates(Townsville_df)

"""**Merge Hospital data with location data**"""

#merging the hospital initial hospital locations from hospital_location_df
ped_summary_merged_df = pd.merge(ped_summary_df, hospital_locations_df[['Facility Idenitifier','Hospital and Health Service','Address','Longitude', 'Latitude']], on='Facility Idenitifier', how='left')
ped_summary_merged_df

#updating locations taken from geocode locations

ped_summary_merged_df.set_index('Facility Idenitifier', inplace=True)
Central_Queensland_df.set_index('Facility Idenitifier', inplace=True)
Central_West_df.set_index('Facility Idenitifier', inplace=True)
Metro_North_df.set_index('Facility Idenitifier', inplace=True)
Metro_South_df.set_index('Facility Idenitifier', inplace=True)
Childrens_Health_Queensland_df.set_index('Facility Idenitifier', inplace=True)
Darling_Downs_df.set_index('Facility Idenitifier', inplace=True)
Mackay_df.set_index('Facility Idenitifier', inplace=True)
Gold_Coast_df.set_index('Facility Idenitifier', inplace=True)
Mater_Public_Hospitals_df.set_index('Facility Idenitifier', inplace=True)
Sunshine_Coast_df.set_index('Facility Idenitifier', inplace=True)
South_West_df.set_index('Facility Idenitifier', inplace=True)
North_West_df.set_index('Facility Idenitifier', inplace=True)
West_Moreton_df.set_index('Facility Idenitifier', inplace=True)
Wide_Bay_df.set_index('Facility Idenitifier', inplace=True)
Townsville_df.set_index('Facility Idenitifier', inplace=True)

# Update the values in the main DataFrame with matching rows from the update DataFrame
ped_summary_merged_df.update(Central_Queensland_df)
ped_summary_merged_df.update(Central_West_df)
ped_summary_merged_df.update(Metro_North_df)
ped_summary_merged_df.update(Metro_South_df)
ped_summary_merged_df.update(Childrens_Health_Queensland_df)
ped_summary_merged_df.update(Darling_Downs_df)
ped_summary_merged_df.update(Mackay_df)
ped_summary_merged_df.update(Gold_Coast_df)
ped_summary_merged_df.update(Mater_Public_Hospitals_df)
ped_summary_merged_df.update(Sunshine_Coast_df)
ped_summary_merged_df.update(South_West_df)
ped_summary_merged_df.update(North_West_df)
ped_summary_merged_df.update(West_Moreton_df)
ped_summary_merged_df.update(Wide_Bay_df)
ped_summary_merged_df.update(Townsville_df)

# Reset the index
ped_summary_merged_df.reset_index(inplace=True)
ped_summary_merged_df

#updating values manually where the values that couldn't be updated by the geocoder
ped_summary_merged_df = ped_summary_merged_df.copy()

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 145, '149.455045')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 145, '-24.133497')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 159, '143.042415')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 159, '-22.38306')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 69, '152.822197')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 69, '-25.300442')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 99, '151.716723')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 99, '-27.424595')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 114, '148.226391')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 114, '-28.580296')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 173, '148.054581')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 173, '-22.001662')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 211, '145.482382')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 211, '-17.267115')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 214, '145.768594')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 214, '-16.911947')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 222, '146.030311')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 222, '-17.519231')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 227, '145.923618')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 227, '-17.927148')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 226, '142.219436')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 226, '-10.58381')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 228, '141.866887')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 228, '-12.64093')

ped_summary_merged_df['Longitude'] = ped_summary_merged_df['Longitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 249, '139.179393')

ped_summary_merged_df['Latitude'] = ped_summary_merged_df['Latitude'].where(ped_summary_merged_df['Facility Idenitifier'] != 249, '-16.665093')

ped_summary_merged_df

"""**(4) Converting data types of columns**

The percentage containing columns Longitude, Latitude are having string data type and in order to use these columns for the numerical calculations, it is required to convert the data types as float. So following code will use to convert the datatypes using .astype() method.
"""

#checking dataframe data types for each columns
ped_summary_merged_df.info()

floatList = ['Longitude','Latitude','Attendance_During_Clinic_Time(%)','Attendance_Left_Without_Waiting(%)',
             'Admitted_Count(%)']
ped_summary_df_final = ped_summary_merged_df.copy()
for clmn in floatList:
    ped_summary_df_final[clmn] = ped_summary_df_final[clmn].astype('float')

ped_summary_df_final.info()

"""## Step 03: Analysis

As per the initial analysis, Queensland Children's Hospital was identified as a highly patient-visited hospital. But in order to track down which area this hospital is located and how the patient volume has been distributed in that area we will use the hospital location information for further analysis.

For this analysis, **Enhanced Visualisation** techniques will be used to further explore the data by comparing the location-related data as well.

The analysis will consider the **human and ethical factors** by making human intuitions and assumptions and these assumptions will be acknowledged in this report.
This analysis will be more focused on the metropolitan areas and regional areas hospital distribution details and when considering the regionals, it has been assumed that Brisbane city area and all the South East Queensland come under the metropolitan areas and the rest of the service areas have been considered as regional areas.
In this analysis, it has been assumed that patients have visited or been taken to the emergency department based on their residential area or based on the place where the injury occurred.  
The analysis is based on 3 months of data and it has been assumed that these three months of data would be enough to cover the insights taken for the whole year 2022.

The final insights are built based on these human and ethical factors and assumptions and it is possible to change these factors and assumptions which could lead to coming up with new insights.

**Patient volume distribution in Queensland hospitals' Emergency Departments & highly demanded regions**

    There are some areas that have large numbers of ED patients compared to other areas regardless of the triage    category. Most of the hospitals located in South East Queensland (around metro regions) seem to have higher    patient volumes compared to the Inland(regional) state hospitals. Understanding the state-wise patient         distribution could help in considering the areas separately on how to improve their performances.

    By this, we can see which Health Services are more popular among patients and which areas required more        attention to ED facilities with performance enhancements.
"""

hospital_patient_count = ped_summary_df_final.groupby(['Hospital and Health Service'])['Attendance_Count'].sum().reset_index(name='total patient count')
#print(hospital_patient_count)

#get the top 10 rows with the lowest and the highest number of ED patients for any triage_category
highest_patient_count = hospital_patient_count.nlargest(10, 'total patient count')
print('\nHospitals having highest ED patient count: ')
print(highest_patient_count)

lowest_patient_count = hospital_patient_count.nsmallest(10, 'total patient count')
print('\nHospitals having lowest ED patient count: ')
print(lowest_patient_count)

"""**Which triage category in which state has more patients coming for the treatements at hospitals' Emergency Department?**

    Eventhough we know triage categories 3 and 4 has more patients reported to the hospitals, it is required to  understand which state is most likely to occur such injury or illness. Understanding this could help the relavant parties(government, police) to get precuations within that area to prevent such injuries or could inform people regarding such illnesses.
"""

triage_cat_patient=ped_summary_df_final.groupby(['Triage_Category','Hospital and Health Service'])['Attendance_Count'].sum().reset_index(name='total patient count')
triage_cat_patient

#What triage_category has the highest and lowest number of ED patients
highest_triage_count = triage_cat_patient.nlargest(10, 'total patient count')
print('\nHospitals having highest ED patient count with relevant triage category: ')
print(highest_triage_count)

lowest_triage_count = triage_cat_patient.nsmallest(10, 'total patient count')
print('\nHospitals having lowest ED patient count with relevant triage category: ')
print(lowest_triage_count)

"""**Waiting time and Triage_Category relationships based on hospital service region**

    Now we have identified that triage category 3,4 and 5 have large patient count and we can check the waiting time for each of these triage categories.

    After creating a sub dataframe containg only details of Hospital and Health Service, Triage_Category, Attendance_Count, Waiting_Time, Attendance_During_Clinic_Time(%) we can compare these columns according to thier values. When we retrieve subset of data which has the maxmimum waiting_time and minimum_waiting_time we can see that most of the hospitals high wait time was taken to triage_category 5 and 4.

    But it is noticeable that highest time taken triage category has a less number of patient count which denotes that waiting time also could be vary among the hospital even for the same triage category. Therefore, we need to do the analysis based on each hospital service.
"""

waittime_triage_df = ped_summary_df_final[['Hospital and Health Service','Triage_Category','Attendance_Count', 'Waiting_Time']]

max_wait_time = waittime_triage_df.nlargest(10, 'Waiting_Time')
max_wait_time = max_wait_time.sort_values(by='Triage_Category', ascending=False)
print('\nHospitals having highest waiting time with relevant triage category: ')
print(max_wait_time)

min_wait_time = waittime_triage_df.nsmallest(10, 'Waiting_Time')
print('\nHospitals having lowest waiting time with relevant triage category: ')
print(min_wait_time)

"""### Compare Regional and Metro hospital service regions

According to the location analysis above, it can be see that there's a patient volume difference between regional and metro located hospitals. Therefore, for the better clarity and to answer the main question of whether there any difference in patient volume, or waiting time between regional area hospitals and metro area hospitals in Queensland the dataset has been devided into two as metro and regional.

Based on the assumption of Brisbane city and SEQ related regions were taken to the metro dataset and rest of the regions were taken to the regional dataset.
"""

#metro dataset
selected_services_metro = ['Childrens Health Queensland', 'Metro North', 'Metro South', 'West Moreton', 'Sunshine Coast','Gold Coast']
selected_services_metro_df = ped_summary_df_final.loc[ped_summary_df_final['Hospital and Health Service'].isin(selected_services_metro)]
selected_services_metro_df = pd.DataFrame(selected_services_metro_df)
selected_services_metro_df

#regional dataset
selected_services_regional = ['Townsville', 'Torres and Cape', 'Darling Downs', 'Wide Bay', 'Central Queensland','Central West'
                             ,'Mackay','Cairns and Hinterland','North West','South West']
selected_services_regional_df = ped_summary_df_final.loc[ped_summary_df_final['Hospital and Health Service'].isin(selected_services_regional)]
selected_services_regional_df = pd.DataFrame(selected_services_regional_df)
selected_services_regional_df

"""**Calculate average values**

Describe method is used to find the average total patient counts based on the Health Service Area. 'hospital_patient_count' contains all the Health Services. When considering the total patient volume in Queensland, there is a 19704.294118 of average patient volume in each region. Eventhough this calculations are correct to make a fair output, we have to analyse deep down by considering other factors as well. So, when calculating the average patient volume we devided data into metro and regional and then calculated the averages. In metro area average patient count was around 33742.33 and in regional area average was around 13251.0

So, it can be seen that there's a difference in hospital patient volumes between metro and regional areas in Queensland.
"""

hospital_patient_count.describe()

hospital_patient_count_metro = selected_services_metro_df.groupby(['Hospital and Health Service'])['Attendance_Count'].sum().reset_index(name='total patient count')
#print(hospital_patient_count)
hospital_patient_count_metro.describe()

hospital_patient_count_regional = selected_services_regional_df.groupby(['Hospital and Health Service'])['Attendance_Count'].sum().reset_index(name='total patient count')
#print(hospital_patient_count)
hospital_patient_count_regional.describe()

#Calculate mean for each column specified in mean_cols list. - full dataset
aggregations = {
    'Attendance_Count': 'mean',
    'Waiting_Time': 'mean',
    'Attendance_During_Clinic_Time(%)': 'mean',
    'Attendance_Left_Without_Waiting(%)': 'mean'
}

mean_df = ped_summary_df_final.groupby(['Hospital and Health Service','Hospital_Name','Triage_Category',"Latitude","Longitude"]).agg(aggregations).reset_index()
mean_df

#Calculate mean for each column specified in mean_cols list. - full dataset
aggregations = {
    'Attendance_Count': 'mean',
    'Waiting_Time': 'mean',
    'Attendance_During_Clinic_Time(%)': 'mean',
    'Attendance_Left_Without_Waiting(%)': 'mean'
}

mean_without_triage_df = ped_summary_df_final.groupby(['Hospital and Health Service','Hospital_Name',"Latitude","Longitude"]).agg(aggregations).reset_index()
mean_without_triage_df

#Calculate mean for each column specified in mean_cols list. - only for metro area
mean_cols = ['Attendance_Count','Waiting_Time','Attendance_During_Clinic_Time(%)',
             'Attendance_Left_Without_Waiting(%)','Admitted_Count(%)','Admitted_Withing4hrs_Count(%)']

metro_mean_df = selected_services_metro_df.groupby(['Hospital and Health Service','Hospital_Name','Triage_Category',"Latitude","Longitude"])[mean_cols].mean().reset_index()

metro_mean_df

#Calculate mean for each column specified in mean_cols list. - only for regional areas
mean_cols = ['Attendance_Count','Waiting_Time','Attendance_During_Clinic_Time(%)',
             'Attendance_Left_Without_Waiting(%)','Admitted_Count(%)','Admitted_Withing4hrs_Count(%)']

regional_mean_df = selected_services_regional_df.groupby(['Hospital and Health Service','Hospital_Name','Triage_Category',"Latitude","Longitude"])[mean_cols].mean().reset_index()

regional_mean_df

#creating sub dataframes for each triage category based on the full dataset
#these datasets will be used in the visualization steps
tri_cat_1_full_df = mean_df.loc[mean_df['Triage_Category'] == "1"]
tri_cat_1_full_df = pd.DataFrame(tri_cat_1_full_df)
tri_cat_1_full_df

tri_cat_2_full_df = mean_df.loc[mean_df['Triage_Category'] == "2"]
tri_cat_2_full_df = pd.DataFrame(tri_cat_2_full_df)
tri_cat_2_full_df

tri_cat_3_full_df = mean_df.loc[mean_df['Triage_Category'] == "3"]
tri_cat_3_full_df = pd.DataFrame(tri_cat_3_full_df)
tri_cat_3_full_df

tri_cat_4_full_df = mean_df.loc[mean_df['Triage_Category'] == "4"]
tri_cat_4_full_df = pd.DataFrame(tri_cat_4_full_df)
tri_cat_4_full_df

tri_cat_5_full_df = mean_df.loc[mean_df['Triage_Category'] == "5"]
tri_cat_5_full_df = pd.DataFrame(tri_cat_5_full_df)
tri_cat_5_full_df

"""## Step 04: Visualise

The data and their relations identifid could be illustraded better using visualtisation plots in this step. To get a better clarity and a good communication we select only few hospitals based on the analyis step outputs.


**Avoid inattentional blindness**

To avoid inattentional blindness, it is important to provide the correct place to start and end with a suitable level of zoom, otherwise, the reader is misled by the data. In this analysis we will be focusing only on Queensland-related data points and therefore, using latitude and longitude the relevant geo codes were provided to show the Queensland margin on the map.

## Patient volume distribution in Queensland

To answer the question of what the general patient volume distribution in Queensland hospitals is and what are the highly demanded regions and to check if there any difference in patient volume between regional area hospitals and metro area hospitals in Queensland, the following map details will be used.

Map uses the mean_without_triage_df dataset that contains the average values calculated for each hospital service. The colour scale is showing the waiting time for each hospital in minutes and the size of the dots represents the patient count.

**Choosing a colour scale**

Choosing colour scale ["blue","orange","red"] to represent the total patient count and not using greenery colour since the mapbox_style used is "stamen-terrain" which has more greenery background. The colour blue is considered a cool colour and blue will represent a normal amount of patients, red as a warm colour will indicate high patient volume while orange will indicate a middle level of high and low patient volume.
"""

import pandas as pd
import plotly.express as px # Data visualisation library
import json
from urllib.request import urlopen
import matplotlib.pyplot as plt
import seaborn as sns

#Total patients distribution with waiting time in Queensland hospitals EDs(2022)

ped_map = px.scatter_mapbox(mean_without_triage_df,
    lat="Latitude",
    lon="Longitude",
    title="Total patients distribution with waiting time in Queensland hospitals EDs(2022)",
    color = "Waiting_Time",
    size = 'Attendance_Count',
    size_max = 40,
    hover_name = "Hospital_Name",
    hover_data = ["Hospital and Health Service","Attendance_Count"],
    color_continuous_scale = ["blue","orange","red"] # Sets the colour scale to be used
)
ped_map.update_layout(mapbox_style="stamen-terrain",
    mapbox_center_lat = -20, # Specifies the starting latitude for first render
    mapbox_center_lon = 146,  # Specifies the starting longitude for first render
    mapbox_zoom = 4.8, # Specifies the starting zoom for first render
    height = 900,
    width = 1000,
    margin={"r":10,"t":30,"l":10,"b":10})
#ped_map.update_traces(marker_size = 10)

ped_map.update_layout(coloraxis_colorbar=dict(
    title="Waiting time(min)"
))

ped_map.show()

"""In the above map, we can see the patient distribution clearly throught out the Qeensland against how the waiting time in each of these hospitals. Eventhough the hospitals are located in regional areas with less patient count, we can there could be waiting time when it comes to the treatments.

## Patients left without treatment and waiting time handled by each region for different Triage categories


According to the above visualization, high patient volume distribution can be seen around metropolitan regions and some coastal areas in Queensland while less patient volume is seen around regional areas. Therefore, we will now further analyse the dataset based on location in metro and regional areas.

The ["blue","orange","red"] colour scale is used to show the Patients left without treatment count variations clearly. Blue is used to show a smooth and general amount of left count, orange is used to indicate a warning amount of leaving count and red is used to indicate the risk level of patients leaving count. (Green and yellow have not been used since the map background has those colours.)


The following maps will show the patient's percentages for each triage category type that left without taking treatments against their waiting time. By this, we can analyse what factors affect the patients leaving without treatments. To check if the geographical location of the hospital contributes to the patients leaving, we drew maps containing these details.

Maps are separated to 5 maps to clearly identify the differences and how patients leaving depends on the Triage category.  The colour scale shows the patients leaving percentage and the size of the dots represents the waiting time.
"""

#Patients left without treatments in Queensland for Triage Category type 1(2022)
ped_map = px.scatter_mapbox(tri_cat_1_full_df,
    lat="Latitude",
    lon="Longitude",
    title="Patients left without treatments in Queensland for Triage Category type 1(2022)",
    hover_name = "Hospital_Name",
    size_max=20,
    hover_data = ["Hospital and Health Service","Waiting_Time","Attendance_Count","Triage_Category"],
    color = "Attendance_Left_Without_Waiting(%)",
    size= "Waiting_Time",
    color_continuous_scale = ["blue","orange","red"], # Sets the colour scale to be used
    range_color=[0,5]
)
ped_map.update_layout(mapbox_style="stamen-terrain",
    mapbox_center_lat = -20, # Specifies the starting latitude for first render
    mapbox_center_lon = 146,  # Specifies the starting longitude for first render
    mapbox_zoom = 4.8, # Specifies the starting zoom for first render
    height = 900,
    width = 1000,
    margin={"r":10,"t":30,"l":10,"b":10})

ped_map.update_layout(coloraxis_colorbar=dict(
    title="Patients left(%)"
))

ped_map.show()

#Patients left without treatments in Queensland for Triage Category type 2(2022)
ped_map = px.scatter_mapbox(tri_cat_2_full_df,
    lat="Latitude",
    lon="Longitude",
    title="Patients left without treatments in Queensland for Triage Category type 2(2022)",
    hover_name = "Hospital_Name",
    size_max=20,
    hover_data = ["Hospital and Health Service","Waiting_Time","Attendance_Count","Triage_Category"],
    color = "Attendance_Left_Without_Waiting(%)",
    size= "Waiting_Time",
    color_continuous_scale = ["blue","orange","red"], # Sets the colour scale to be used
    #range_color=[0,5]
)
ped_map.update_layout(mapbox_style="stamen-terrain",
    mapbox_center_lat = -20, # Specifies the starting latitude for first render
    mapbox_center_lon = 146,  # Specifies the starting longitude for first render
    mapbox_zoom = 4.8, # Specifies the starting zoom for first render
    height = 900,
    width = 1000,
    margin={"r":10,"t":30,"l":10,"b":10})

ped_map.update_layout(coloraxis_colorbar=dict(
    title="Patients left(%)"
))

ped_map.show()

#Patients left without treatments in Queensland for Triage Category type 3(2022)
ped_map = px.scatter_mapbox(tri_cat_3_full_df,
    lat="Latitude",
    lon="Longitude",
    title="Patients left without treatments in Queensland for Triage Category type 3(2022)",
    hover_name = "Hospital_Name",
    size_max=20,
    hover_data = ["Hospital and Health Service","Waiting_Time","Attendance_Count","Triage_Category"],
    color = "Attendance_Left_Without_Waiting(%)",
    size= "Waiting_Time",
    color_continuous_scale = ["blue","orange","red"], # Sets the colour scale to be used
    #range_color=[0,5]
)
ped_map.update_layout(mapbox_style="stamen-terrain",
    mapbox_center_lat = -20, # Specifies the starting latitude for first render
    mapbox_center_lon = 146,  # Specifies the starting longitude for first render
    mapbox_zoom = 4.8, # Specifies the starting zoom for first render
    height = 900,
    width = 1000,
    margin={"r":10,"t":30,"l":10,"b":10})

ped_map.update_layout(coloraxis_colorbar=dict(
    title="Patients left(%)"
))

ped_map.show()

#Patients left without treatments in Queensland for Triage Category type 4(2022)
ped_map = px.scatter_mapbox(tri_cat_4_full_df,
    lat="Latitude",
    lon="Longitude",
    title="Patients left without treatments in Queensland for Triage Category type 4(2022)",
    hover_name = "Hospital_Name",
    size_max=20,
    hover_data = ["Hospital and Health Service","Waiting_Time","Attendance_Count","Triage_Category"],
    color = "Attendance_Left_Without_Waiting(%)",
    size= "Waiting_Time",
    color_continuous_scale = ["blue","orange","red"], # Sets the colour scale to be used
    #range_color=[0,5]
)
ped_map.update_layout(mapbox_style="stamen-terrain",
    mapbox_center_lat = -20, # Specifies the starting latitude for first render
    mapbox_center_lon = 146,  # Specifies the starting longitude for first render
    mapbox_zoom = 4.8, # Specifies the starting zoom for first render
    height = 900,
    width = 1000,
    margin={"r":10,"t":30,"l":10,"b":10})

ped_map.update_layout(coloraxis_colorbar=dict(
    title="Patients left(%)"
))

ped_map.show()

#Patients left without treatments in Queensland for Triage Category type 5(2022)
ped_map = px.scatter_mapbox(tri_cat_5_full_df,
    lat="Latitude",
    lon="Longitude",
    title="Patients left without treatments in Queensland for Triage Category type 5(2022)",
    hover_name = "Hospital_Name",
    size_max=20,
    hover_data = ["Hospital and Health Service","Waiting_Time","Attendance_Count","Triage_Category"],
    color = "Attendance_Left_Without_Waiting(%)",
    size= "Waiting_Time",
    color_continuous_scale = ["blue","orange","red"], # Sets the colour scale to be used
    #range_color=[0,5]
)
ped_map.update_layout(mapbox_style="stamen-terrain",
    mapbox_center_lat = -20, # Specifies the starting latitude for first render
    mapbox_center_lon = 146,  # Specifies the starting longitude for first render
    mapbox_zoom = 4.8, # Specifies the starting zoom for first render
    height = 900,
    width = 1000,
    margin={"r":10,"t":30,"l":10,"b":10})

ped_map.update_layout(coloraxis_colorbar=dict(
    title="Patients left(%)"
))

ped_map.show()

"""According to the above 5 maps, we can see that for triage categories 01 and 02, there is a very low chance of patients leaving the hospitals regardless of whether it is a metro area or regional area. But, with triage category 03, there is a high chance of patients leaving the hospital without taking treatments and in metro areas, the possibility of leaving is high compared to regional areas. In triage category 04 and 05, in regional areas patients has left the hospitals even though there seems to be less waiting time compared to the metro area.

To support these findings and to further exploration bar graphs and scatter plots will be used.

## Further exploring using Interactive bar graphs and scatter plots

According to the maps, it can be clearly see that metro area which is in South East Queensland(SEQ) health services has a large number of patient volume. So we have filtered those health services and plotted a bar graph against the patient volume to see how the patient volume has distributed around SEQ.
"""

import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

patient_count_fig = px.bar(hospital_patient_count[(hospital_patient_count["Hospital and Health Service"] == "Metro North") | (hospital_patient_count["Hospital and Health Service"] == "Metro South")
                                           | (hospital_patient_count["Hospital and Health Service"] == "Childrens Health Queensland") | (hospital_patient_count["Hospital and Health Service"] == "Sunshine Coast")
                                           | (hospital_patient_count["Hospital and Health Service"] == "West Moreton") | (hospital_patient_count["Hospital and Health Service"] == "Gold Coast")],
    x="Hospital and Health Service",
    y="total patient count",
    title="Total patient volume in South East Queensland Health Service regions",
    labels={
        "Hospital and Health Service": "Health Service Region",
        "total patient count": "Patient Count"
    },
     text_auto=True)
patient_count_fig.update_layout(
    title_font_size=20,
    title_x=0.5,
)
patient_count_fig.update_xaxes(
    title_font_size=15,
    tickfont_size=12
)
patient_count_fig.update_yaxes(
    title_font_size=15,
    tickfont_size=10
)
patient_count_fig.show()

"""**Avoiding Anchoring bias**

From the previous bar graph, we have noticed that hospitals in SEQ health services have higher patient counts and West Moreton has quite less patient count compared to Children’s Health Queensland health service. Here we have set our anchor as Children’s Health Queensland health service and compared its volume with other health services.
But when we plot the graph to show all health services in Queensland, we can see that not all the SEQ health services have high patient volume, and even some regional areas have high patient volume compared to some metro areas like West Moreton.

So, taking all the health services into one view could make avoid the anchoring bias which could lead to false information.

"""

qld_patient_count_fig = px.bar(hospital_patient_count.sort_values(by="total patient count", ascending=False),
    x="Hospital and Health Service",
    y="total patient count",
    title="Total patient volume in Queensland Health Service regions",
    labels={
        "Hospital and Health Service": "Health Service Region",
        "total patient count": "Patient Count"
    },
     text_auto=True)
qld_patient_count_fig.update_layout(
    title_font_size=20,
    title_x=0.5,
)
qld_patient_count_fig["data"][0]["marker"]["color"] = ["red" if (c == "Childrens Health Queensland") | (c == "Metro North")
                                            | (c == "Metro South") | (c == "Sunshine Coast") | (c == "West Moreton")
                                            | (c == "Gold Coast")
                                            else "blue" for c in qld_patient_count_fig["data"][0]["x"]] # Creates a condition for the bar's colour depending on the region
qld_patient_count_fig.show()

"""**Which Triage category has the highest patient counts?**

We have created the data frame triage_cat_patient at the analysis phase which contains the hospitals and their triage category-related patient counts.

In the below interactive scatter plot, we can see that almost all the health services have a high number of patients visiting the hospital for triage categories 3 and 4 regardless of the location.

In this plot, we use colour codes to be colors = ['red', 'orange', 'yellow','blue', 'green'] to show the triage category priority levels starting from 1 to 5. Triage category 1 denotes it is a high-priority category and it will show using the warm colour red, then 2 with orange, 3 with some middle-level cool colour yellow, 4 with another cool colour blue and 5 with a low risk indicating colour green.   

"""

# Plot a scatter plot using the Walmart dataframe
patientcount_scatter = px.scatter(triage_cat_patient,
    x="Hospital and Health Service",
    y="total patient count",
    color="Triage_Category")

colors = ['red', 'orange', 'yellow','blue', 'green']

for i, value in enumerate(triage_cat_patient['Triage_Category'].unique()):
    patientcount_scatter.update_traces(marker=dict(color=colors[i]), selector=dict(name=value))

patientcount_scatter.show()

"""**Health Service Vs Waiting time for each Triage Category**

We have created the data frame waittime_triage_df at the analysis phase which contains the health services and their waiting time for each triage category.
Since these records require to create of multi-dimensional plots, the code uses pivot_table() which helps to group and aggregate data over multiple variables so that can create multi-dimensional plots.
With this interactive bar graph, we can see how the waiting time is differs within each area against triage categories.

In this plot, we use colour codes to be colors = ['red', 'orange', 'yellow','blue', 'green'] to show the triage category priority levels starting from 1 to 5. Triage category 1 denotes it is a high-priority category and it will show using the warm colour red, then 2 with orange, 3 with some middle-level cool colour yellow, 4 with another cool colour blue and 5 with a low risk indicating colour green.

So we can clearly see that cool colours green, blue and yellow show high waiting times compared to warm colours red and orange.

"""

import pandas as pd
import plotly.express as px

# Create a pivot table
pivot = pd.pivot_table(waittime_triage_df, values='Waiting_Time', index=['Hospital and Health Service'], columns=['Triage_Category'])

# Convert pivot table to long format
pivot_long = pivot.reset_index().melt(id_vars='Hospital and Health Service', var_name='Triage_Category', value_name='Waiting_Time')

# Create an interactive bar plot with plotly
fig = px.bar(pivot_long,
             x='Hospital and Health Service',
             y='Waiting_Time',
             color='Triage_Category',
             color_discrete_sequence=['red', 'orange', 'yellow', 'blue', 'green'])

# Update layout and axis labels
fig.update_layout(
    title='Waiting times for Health Services in QLD',
    xaxis=dict(title='Hospital and Health Service'),
    yaxis=dict(title='Waiting time (min)')
)

fig.show()

"""**Patient leaving without waiting for treatment- Metro area vs regional area**

We tried to compare the waiting time against the patients leaving percentages beased on metro areas and regional areas to check if the leaving without treatment is depended on the hospital locations. The below first interactive scatter plots shows the metro area leaving perecenatges and the second onteractive scatter plot shows the regional area leaving percentages.


"""

fig = px.scatter(metro_mean_df,
                 x='Waiting_Time',
                 y='Attendance_Left_Without_Waiting(%)',
                 color='Triage_Category',
                 title='Waiting Time vs patients left without waiting for treatments in Metro area Hospitals',
                 labels={'Waiting_Time': 'Waiting Time (minutes)', 'Attendance_Left_Without_Waiting(%)': 'Attendance Left Without Waiting (%)'},
                 hover_data=['Hospital and Health Service','Triage_Category'])

# Update legend properties
fig.update_layout(legend=dict(title='Triage Category'))

# Show the interactive plot
fig.show()

fig = px.scatter(regional_mean_df,
                 x='Waiting_Time',
                 y='Attendance_Left_Without_Waiting(%)',
                 color='Triage_Category',
                 title='Waiting Time vs patients left without waiting for treatments in Regional area Hospitals',
                 labels={'Waiting_Time': 'Waiting Time (minutes)', 'Attendance_Left_Without_Waiting(%)': 'Attendance Left Without Waiting (%)'},
                 hover_data=['Hospital and Health Service','Triage_Category'])

# Update legend properties
fig.update_layout(legend=dict(title='Triage Category'))

# Show the interactive plot
fig.show()

"""**Confirmation bias overcome**

Confirmation bias refers to the tendency to interpret new information as confirmation of our pre-existing beliefs and opinions.

As per human nature, we tend to believe that there is less number of hospitals in regional areas. As per our assumption, people have to visit the ED based on their residential area or based on the place the injury occurred. Therefore, when a patient comes to an ED of a regional area hospital they have to wait and take the treatments irrespective of the waiting time due to limited hospital selection options existing in regional areas.

But, based on this factor even though the human mind labelled this as a true factor, according to the above two scatter plots we could clearly see that in regional area hospitals also patients tend to leave the hospital without taking treatments and for some triage categories regional areas patient leaving percentage shows a higher amount compared to the metro area.

## Step 05: Insights

**Insights**

We can summarize the insights derived from the analyse and visualization steps to answer these questions.

- There are many hospitals located around the Queensland regions and each region has their own hospitals.
- The number of patients visiting a hospital ED varies to each other. Some hospitals have high patient volume, and some hospitals have less patient volume.
- Hospitals located around South East Queensland region has a high average patient volume compared to the regional area hospitals.
- There are waiting times in the hospital EDs regardless of their location whether they are located in metro areas or regional areas.
- Triage categories 3 and 4 are the highest patient visited categories in both the metro and regional area health services hospitals.

- In metro area health services,
       - Triage categories 01 and 02 have a low possibility of patients leaving the hospitals without treatments.
       - Triage category 03, when waiting time exceeds 30 minutes then there's more than 5% of patients leave the hospital without treatments. (but the average leave percentage is less than 10%)
       - In triage categories 04 and 05, there is less than 10% of patients leave the hospital without treatments for any wait time.

- In regional area health services,
       - Triage categories 01 and 02 low possibility of patients leaving the hospitals without treatments.
       - Triage category 03, there's less than 10% of patients leave the hospital without treatments for any wait time
       - Triage category 04, when waiting time exceeds 40 minutes then there's more than 10% of patients leave the hospital without treatments
       -Triage category 05, when waiting time exceeds 30 minutes then there's more than 10% of patients leave the hospital without treatment


To summarise all the findings, the Queensland government and Queensland Health can more focus on South East Queensland region hospitals to check if the existing hospitals' ED capacities are large enough to handle the patient volume. Also, the government can take precautions by advising people about risk injuries which are in the triage category types 01 and 02 that are highly reported in hospitals.

For triage categories 01 and 02, there is a very low chance of patients leaving the hospitals regardless of hospital location whether it is located in the metro area or a regional area. With triage category 03, there is a chance of patients (around 10% of patients) leaving the hospital without taking treatments. In triage categories 04 and 05, in regional areas, patients have left the hospitals even though there seems to be less waiting time compared to the metro area. Also, when waiting time exceeds 30 minutes then there's more than 10% of patients leave the hospital without treatments in regional area health services for triage categories 4 and 5.

So, when considering regional areas, the patients reported to triage categories 4 and 5 seem to have another path of getting treated after they leave the hospitals without taking treatments. Therefore, it is required to further analyse such other factors to answer the question of why patients leave these types of triage categories and does these triage-category illnesses or injuries actually required to be reported to hospital EDs. By that, the hospital administration can handle the long waiting time while the patients can get a solution for the long waiting time problem for these two types of triage categories.

**Human and Ethical Factors, Assumptions**

This analysis was conducted by considering the human and ethical factors in making human institutions and assumptions and these assumptions have been acknowledged in this report. This analysis focused on the metropolitan areas and regional areas hospital distribution details in Queensland and when considering the regionals, it has been assumed that Brisbane city area and all the South East Queensland come under the metropolitan areas and the rest of the service areas have been considered as regional areas. In this analysis, it has been assumed that patients have visited or been taken to the emergency department based on their residential area or based on the place where the injury occurred. The analysis was based on 3 months of data and it has been assumed that these three months of data would be enough to cover the insights taken for the whole year 2022.

The final insights are built based on these human and ethical factors and assumptions and it is possible to change these factors and assumptions which could lead to coming up with new insights.
"""